#!/bin/zsh
setopt prompt_subst
autoload colors
colors

schedprompt() {
  emulate -L zsh
  zmodload -i zsh/sched

  # Remove existing event, so that multiple calls to
  # "schedprompt" work OK.  (You could put one in precmd to push
  # the timer 30 seconds into the future, for example.)
  integer i=${"${(@)zsh_scheduled_events#*:*:}"[(I)schedprompt]}
  (( i )) && sched -$i

  # Test that zle is running before calling the widget (recommended
  # to avoid error messages).
  # Otherwise it updates on entry to zle, so there's no loss.
  zle && zle reset-prompt

  # This ensures we're not too far off the start of the minute
  sched +$((60 - $(date +%S))) schedprompt
}

# root prompt
[ $UID = 0 ] && export PROMPT="%F{black}%K{124}%m%F{124}%K{22}%F{black}%K{22} %24<..<%~%<<%F{22}%K{black}%f%k "
# # normal user prompt
[ $UID != 0 ] && export PROMPT="%F{black}%K{28}%n@%m%F{28}%K{22}%F{black}%K{22} %24<..<%~%<<%F{22}%K{black}%f%k "

get_rprompt() {
    local RP=''
    local F1=28
    local F2=22

    if [[ -n $(get_git_prompt_info) ]]; then
        RP="%F{$F2}%K{black}%F{black}%K{$F2}$(get_git_prompt_info)%F{$F2}%K{$F1}"
    else
        RP="%F{$F1}%K{black}"
    fi

    echo ${RP}"%F{black}%K{$F1}%D{%d.%m.%y %H:%M}%{$reset_color%}"
}
RPROMPT='$(get_rprompt)'
ZLE_RPROMPT_INDENT=0  # no space after the right prompt
schedprompt

case $TERM in
    xterm*|rxvt*)
        precmd () {print -Pn "\e]0;%n@%m: %~\a"}
        preexec() {
            case $1 in
            fg|bg) getjobs "${(z)1}" ;;
            *) print -Pn "\e]0;$1\a" ;;
        esac
        }
        bindkey '\e[H' beginning-of-line
        bindkey '\e[F' end-of-line
        ;;
    screen*)
        function title {
            print -nR $'\033k'$1$'\033'\\\

            print -nR $'\033]0;'$2$'\a'
        }
        function precmd {
            title zsh "$PWD"
        }

        preexec () {
            emulate -L zsh
            local -a cmd; cmd=(${(z)1})
            title $cmd[1]:t "$cmd[2,-1]"
        }
        ;;
esac

getjobs () {
    setopt localoptions noshwordsplit noksharrays
    local texts
    case $1 in
        fg|bg) shift; [[ -n $1 ]] || set -- %% ;;
        %*) ;;
    esac
    repeat $#
    do
        # This case statement emulates jobs.c:getjob()
        case $1 in
        %(|[%+])) 1=${(k)jobstates[(r)*:+:*]} ;;
        %-) 1=${(k)jobstates[(r)*:-:*]} ;;
        %<->) 1=${1#%} ;;
        %[?]*) 1=${${(Ok)jobtexts[(R)*${1#%[?]}*]}[1]} ;;
        *) 1=${${(Ok)jobtexts[(R)$1*]}[1]} ;;
        esac
        [[ -n $1 ]] && texts=($texts ${jobtexts[$1]})
        shift
    done
    (( $#texts )) && print -Pn "\e]0;${texts}\a"
    return 0
}
